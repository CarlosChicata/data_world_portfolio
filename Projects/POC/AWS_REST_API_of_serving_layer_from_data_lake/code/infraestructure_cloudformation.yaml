AWSTemplateFormatVersion: "2010-09-09"
Description: "Automaticed creation of all infraestructure to support POC case 1."

Parameters:
  DatalakeDBInGlue:
    Type: String
    MinLength: "4"
    Default: "db-poc-case-1"
    Description: Name of DB in AWS Glue database

  DatalakeS3Name:
    Type: String
    MinLength: "4"
    Default: "s3-datalake-poc-case-1"
    Description: "Name of bucket will get all parquet files (tables)."

  AccessControlDBS3Name:
    Type: String
    MinLength: "4"
    Default: "db-controlaccess-poc-case-1"
    Description: "DB contain all access control to authorizer process in API."
  
  ResultedQueryStoreS3:
    Type: String
    MinLength: "4"
    Default: "s3-stored-queries-poc-case-1"
    Description: "Name of bucket will store teh result of queries from athena"

  DataUserConsumerAPIName:
    Type: String
    MinLength: "4"
    Default: "third-consumer-data-api"
    Description: "Name of API to deliver data"


Resources:
  ######
  ### Resource to generate database and data processing system
  ######

  ## Role will be used in IaC
  AWSGlueJobRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:  "*"
                Resource: "*"
      Path: "/" 

  ## Resource to get tables (AWS S3)
  DatalakeS3:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref DatalakeS3Name
      AccessControl: "PublicReadWrite"

  # Resource to store data generated from Athena
  ResultQueriesAthenaS3:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref ResultedQueryStoreS3
      AccessControl: "PublicReadWrite"

  ## Resource to prepare database (AWS GLUE)
  POCCase1Database:
    Type: "AWS::Glue::Database"
    Properties:
      DatabaseInput:
        Description: "Database to store all table in POC case 1"
        Name: !Ref DatalakeDBInGlue
      CatalogId: !Ref AWS::AccountId ## reference the same AWS account

  ## moving file s3-to-s3 using AWS Glue job
  S3ToS3GlueJob:
    Type: "AWS::Glue::Job"
    Properties:
      Role: !Ref AWSGlueJobRole
      Name: "S3ToS3Moving"
      Command : 
        Name: "pythonshell"
        PythonVersion: "3.9"
        ScriptLocation: "s3://script-poc-case-1/load_tables.py"
      DefaultArguments:
        "--bucket-origin": "poc-case-1-table-demo"
        "--bucket-destiny" : !Ref DatalakeS3Name
      MaxRetries: 0
      Description: "Moving files from S3 to S3 script"

  ## preparing athena workspace
  AthenaWorkSpace:
    Type: "AWS::Athena::WorkGroup"
    Properties:
      Description: "Resulted data storage from queries of AWS Athena."
      Name: "resulted-queries-athena-poc-case-1"
      WorkGroupConfiguration:
        ResultConfiguration: 
          OutputLocation:  !Join
            - "/"
            - - "s3:/"
              - !Ref ResultedQueryStoreS3

  ## get metadata of tables
  ParserMetadataTableGlueCrawler:
    Type: "AWS::Glue::Crawler"
    Properties:
      Name: "poc-case-1-crawler"
      Role: !Ref AWSGlueJobRole
      DatabaseName: !Ref POCCase1Database
      Targets:
        S3Targets: # manual adding data store
          - Path : "s3://s3-datalake-poc-case-1/city-table/"
          - Path : "s3://s3-datalake-poc-case-1/client-table/"
          - Path : "s3://s3-datalake-poc-case-1/country-table/"
          - Path : "s3://s3-datalake-poc-case-1/order-table/"
          - Path : "s3://s3-datalake-poc-case-1/product-size-table/"
          - Path : "s3://s3-datalake-poc-case-1/route-table/"
          - Path : "s3://s3-datalake-poc-case-1/service-table/"
          - Path : "s3://s3-datalake-poc-case-1/trackcode-table/"
  
  ######
  ### Resource to generate access control table in API
  ######

  AccessControlDBS3:
    Type: "AWS::Glue::Database"
    Properties:
      DatabaseInput:
        Description: "Database to store access control in POC case 1"
        Name: !Ref AccessControlDBS3Name
      CatalogId: !Ref AWS::AccountId ## reference the same AWS account

  ParserMetadataAccessControlGlueCrawler:
    Type: "AWS::Glue::Crawler"
    Properties:
      Name: "poc-case-1-crawler-access-control-data"
      Role: !Ref AWSGlueJobRole
      DatabaseName: !Ref AccessControlDBS3
      Targets:
        S3Targets: # manual adding data store
          - Path : "s3://s3-datalake-poc-case-1/access-control-table/"

  ######
  ### Resource to generate API
  ######

  AuthLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:  "*"
                Resource: "*"
      Path: "/" 

  DataUserConsumerAPIGateway:
    Type: "AWS::ApiGatewayV2::Api"
    Properties:
      Name: !Ref DataUserConsumerAPIName
      ProtocolType: "HTTP"
      Description: "API to deliver data into client user from DB"

  DataUserConsumerAPIStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref DataUserConsumerAPIGateway
      StageName: prod
      Description: Live Stage
      AutoDeploy: true

  ####
  # Create all resources and endpoints
  ####

  ## SQL endpoint #1

  LambdaAuthAWS1SQLEndpoint:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "LambdaAuthAWS1"
      Description: "Authorize the request based in permissions of access control tower for #1 sql endpoint."
      Runtime: "python3.9"
      Role: !GetAtt AuthLambdaRole.Arn
      Handler: auth_all_orders_by_range.lambda_handler
      Timeout: 900
      MemorySize: 2000
      Layers:
        - "arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p39-pandas:12"
      Code:
        S3Bucket: "script-poc-case-1"
        S3Key: "custom_auth_lambda/auth_all_orders_by_range.zip"

  LambdaAuthAWS1SQLEndpointPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref LambdaAuthAWS1SQLEndpoint
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com

  LambdaAuthAWS1SQLEndpointAuthorizer:
    Type: "AWS::ApiGatewayV2::Authorizer"
    Properties:
      ApiId: !Ref DataUserConsumerAPIGateway
      AuthorizerType: "REQUEST"
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaAuthAWS1SQLEndpoint.Arn}/invocations'
      Name: "AuthSQL1Endpoint"
      IdentitySource:
        - $request.header.token
      EnableSimpleResponses: false
      AuthorizerPayloadFormatVersion: "2.0"
      AuthorizerResultTtlInSeconds: 300


  Lambda1SQLEndpoint:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "N1SQLEndpoint"
      Description: "Code of #1 sql endpoint."
      Runtime: "python3.9"
      Role: !GetAtt AuthLambdaRole.Arn
      Handler: all_orders_by_range.lambda_handler
      Timeout: 900
      MemorySize: 2000
      Layers:
        - "arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p39-pandas:12"
      Code:
        S3Bucket: "script-poc-case-1"
        S3Key: "sql_endpoint/all_orders_by_range.zip"

  Lambda1SQLEndpointPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref Lambda1SQLEndpoint
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com

  Lambda1SQLEndpointIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref DataUserConsumerAPIGateway
      Description: "Integration of #1 SQL endpoint process"
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda1SQLEndpoint.Arn}/invocations'

  Lambda1SQLEndpointRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref DataUserConsumerAPIGateway
      RouteKey: "POST /all_orders_by_range"
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref LambdaAuthAWS1SQLEndpointAuthorizer
      Target: !Join
        - /
        - - integrations
          - !Ref Lambda1SQLEndpointIntegration

  ## SQL endpoint #2

  LambdaAuthAWS2SQLEndpoint:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "LambdaAuthAWS2"
      Description: "Authorize the request based in permissions of access control tower for #1 sql endpoint."
      Runtime: "python3.9"
      Role: !GetAtt AuthLambdaRole.Arn
      Handler: auth_count_delivered_trackcode_before_promise_time_by_range.lambda_handler
      Timeout: 900
      MemorySize: 2000
      Layers:
        - "arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p39-pandas:12"
      Code:
        S3Bucket: "script-poc-case-1"
        S3Key: "custom_auth_lambda/auth_count_delivered_trackcode_before_promise_time_by_range.zip"

  LambdaAuthAWS2SQLEndpointPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref LambdaAuthAWS2SQLEndpoint
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com

  LambdaAuthAWS2SQLEndpointAuthorizer:
    Type: "AWS::ApiGatewayV2::Authorizer"
    Properties:
      ApiId: !Ref DataUserConsumerAPIGateway
      AuthorizerType: "REQUEST"
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaAuthAWS2SQLEndpoint.Arn}/invocations'
      Name: "AuthSQL2Endpoint"
      IdentitySource:
        - $request.header.token
      EnableSimpleResponses: false
      AuthorizerPayloadFormatVersion: "2.0"
      AuthorizerResultTtlInSeconds: 300


  Lambda2SQLEndpoint:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "N2SQLEndpoint"
      Description: "Code of #2 sql endpoint."
      Runtime: "python3.9"
      Role: !GetAtt AuthLambdaRole.Arn
      Handler: count_delivered_orders_before_promise_time_by_range.lambda_handler
      Timeout: 900
      MemorySize: 2000
      Layers:
        - "arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p39-pandas:12"
      Code:
        S3Bucket: "script-poc-case-1"
        S3Key: "sql_endpoint/count_delivered_orders_before_promise_time_by_range.zip"

  Lambda2SQLEndpointPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref Lambda2SQLEndpoint
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com

  Lambda2SQLEndpointIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref DataUserConsumerAPIGateway
      Description: "Integration of #2 SQL endpoint process"
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda2SQLEndpoint.Arn}/invocations'

  Lambda2SQLEndpointRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref DataUserConsumerAPIGateway
      RouteKey: "POST /count_delivered_orders_before_promise_time_by_range"
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref LambdaAuthAWS2SQLEndpointAuthorizer
      Target: !Join
        - /
        - - integrations
          - !Ref Lambda2SQLEndpointIntegration

  ## SQL endpoint #3

  LambdaAuthAWS3SQLEndpoint:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "LambdaAuthAWS3"
      Description: "Authorize the request based in permissions of access control tower for #3 sql endpoint."
      Runtime: "python3.9"
      Role: !GetAtt AuthLambdaRole.Arn
      Handler: auth_count_orders_by_range.lambda_handler
      Timeout: 900
      MemorySize: 2000
      Layers:
        - "arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p39-pandas:12"
      Code:
        S3Bucket: "script-poc-case-1"
        S3Key: "custom_auth_lambda/auth_count_orders_by_range.zip"

  LambdaAuthAWS3SQLEndpointPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref LambdaAuthAWS3SQLEndpoint
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com

  LambdaAuthAWS3SQLEndpointAuthorizer:
    Type: "AWS::ApiGatewayV2::Authorizer"
    Properties:
      ApiId: !Ref DataUserConsumerAPIGateway
      AuthorizerType: "REQUEST"
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaAuthAWS3SQLEndpoint.Arn}/invocations'
      Name: "AuthSQL3Endpoint"
      IdentitySource:
        - $request.header.token
      EnableSimpleResponses: false
      AuthorizerPayloadFormatVersion: "2.0"
      AuthorizerResultTtlInSeconds: 300


  Lambda3SQLEndpoint:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "N3SQLEndpoint"
      Description: "Code of #3 sql endpoint."
      Runtime: "python3.9"
      Role: !GetAtt AuthLambdaRole.Arn
      Handler: count_orders_by_range.lambda_handler
      Timeout: 900
      MemorySize: 2000
      Layers:
        - "arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p39-pandas:12"
      Code:
        S3Bucket: "script-poc-case-1"
        S3Key: "sql_endpoint/count_orders_by_range.zip"

  Lambda3SQLEndpointPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref Lambda3SQLEndpoint
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com

  Lambda3SQLEndpointIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref DataUserConsumerAPIGateway
      Description: "Integration of #3 SQL endpoint process"
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda3SQLEndpoint.Arn}/invocations'

  Lambda3SQLEndpointRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref DataUserConsumerAPIGateway
      RouteKey: "POST /count_orders_by_range"
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref LambdaAuthAWS3SQLEndpointAuthorizer
      Target: !Join
        - /
        - - integrations
          - !Ref Lambda3SQLEndpointIntegration

  ## SQL endpoint #4

  LambdaAuthAWS4SQLEndpoint:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "LambdaAuthAWS4"
      Description: "Authorize the request based in permissions of access control tower for #4 sql endpoint."
      Runtime: "python3.9"
      Role: !GetAtt AuthLambdaRole.Arn
      Handler: auth_count_trackcode_by_range.lambda_handler
      Timeout: 900
      MemorySize: 2000
      Layers:
        - "arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p39-pandas:12"
      Code:
        S3Bucket: "script-poc-case-1"
        S3Key: "custom_auth_lambda/auth_count_trackcode_by_range.zip"

  LambdaAuthAWS4SQLEndpointPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref LambdaAuthAWS4SQLEndpoint
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com

  LambdaAuthAWS4SQLEndpointAuthorizer:
    Type: "AWS::ApiGatewayV2::Authorizer"
    Properties:
      ApiId: !Ref DataUserConsumerAPIGateway
      AuthorizerType: "REQUEST"
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaAuthAWS4SQLEndpoint.Arn}/invocations'
      Name: "AuthSQL4Endpoint"
      IdentitySource:
        - $request.header.token
      EnableSimpleResponses: false
      AuthorizerPayloadFormatVersion: "2.0"
      AuthorizerResultTtlInSeconds: 300


  Lambda4SQLEndpoint:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "N4SQLEndpoint"
      Description: "Code of #4 sql endpoint."
      Runtime: "python3.9"
      Role: !GetAtt AuthLambdaRole.Arn
      Handler: count_trackcode_by_range.lambda_handler
      Timeout: 900
      MemorySize: 2000
      Layers:
        - "arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p39-pandas:12"
      Code:
        S3Bucket: "script-poc-case-1"
        S3Key: "sql_endpoint/count_trackcode_by_range.zip"

  Lambda4SQLEndpointPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref Lambda4SQLEndpoint
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com

  Lambda4SQLEndpointIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref DataUserConsumerAPIGateway
      Description: "Integration of #4 SQL endpoint process"
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda4SQLEndpoint.Arn}/invocations'

  Lambda4SQLEndpointRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref DataUserConsumerAPIGateway
      RouteKey: "POST /count_trackcode_by_range"
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref LambdaAuthAWS4SQLEndpointAuthorizer
      Target: !Join
        - /
        - - integrations
          - !Ref Lambda4SQLEndpointIntegration

  ## SQL endpoint #5

  LambdaAuthAWS5SQLEndpoint:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "LambdaAuthAWS5"
      Description: "Authorize the request based in permissions of access control tower for #5 sql endpoint."
      Runtime: "python3.9"
      Role: !GetAtt AuthLambdaRole.Arn
      Handler: auth_count_trackcode_lost_by_range.lambda_handler
      Timeout: 900
      MemorySize: 2000
      Layers:
        - "arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p39-pandas:12"
      Code:
        S3Bucket: "script-poc-case-1"
        S3Key: "custom_auth_lambda/auth_count_trackcode_lost_by_range.zip"

  LambdaAuthAWS5SQLEndpointPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref LambdaAuthAWS5SQLEndpoint
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com

  LambdaAuthAWS5SQLEndpointAuthorizer:
    Type: "AWS::ApiGatewayV2::Authorizer"
    Properties:
      ApiId: !Ref DataUserConsumerAPIGateway
      AuthorizerType: "REQUEST"
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaAuthAWS5SQLEndpoint.Arn}/invocations'
      Name: "AuthSQL5Endpoint"
      IdentitySource:
        - $request.header.token
      EnableSimpleResponses: false
      AuthorizerPayloadFormatVersion: "2.0"
      AuthorizerResultTtlInSeconds: 300


  Lambda5SQLEndpoint:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "N5SQLEndpoint"
      Description: "Code of #5 sql endpoint."
      Runtime: "python3.9"
      Role: !GetAtt AuthLambdaRole.Arn
      Handler: count_trackcode_lost_by_range.lambda_handler
      Timeout: 900
      MemorySize: 2000
      Layers:
        - "arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p39-pandas:12"
      Code:
        S3Bucket: "script-poc-case-1"
        S3Key: "sql_endpoint/count_trackcode_lost_by_range.zip"

  Lambda5SQLEndpointPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref Lambda5SQLEndpoint
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com

  Lambda5SQLEndpointIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref DataUserConsumerAPIGateway
      Description: "Integration of #5 SQL endpoint process"
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda5SQLEndpoint.Arn}/invocations'

  Lambda5SQLEndpointRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref DataUserConsumerAPIGateway
      RouteKey: "POST /count_trackcode_lost_by_range"
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref LambdaAuthAWS5SQLEndpointAuthorizer
      Target: !Join
        - /
        - - integrations
          - !Ref Lambda5SQLEndpointIntegration

  ## SQL endpoint #6

  LambdaAuthAWS6SQLEndpoint:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "LambdaAuthAWS6"
      Description: "Authorize the request based in permissions of access control tower for #6 sql endpoint."
      Runtime: "python3.9"
      Role: !GetAtt AuthLambdaRole.Arn
      Handler: auth_get_money_from_routes_by_range.lambda_handler
      Timeout: 900
      MemorySize: 2000
      Layers:
        - "arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p39-pandas:12"
      Code:
        S3Bucket: "script-poc-case-1"
        S3Key: "custom_auth_lambda/auth_get_money_from_routes_by_range.zip"

  LambdaAuthAWS6SQLEndpointPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref LambdaAuthAWS6SQLEndpoint
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com

  LambdaAuthAWS6SQLEndpointAuthorizer:
    Type: "AWS::ApiGatewayV2::Authorizer"
    Properties:
      ApiId: !Ref DataUserConsumerAPIGateway
      AuthorizerType: "REQUEST"
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaAuthAWS6SQLEndpoint.Arn}/invocations'
      Name: "AuthSQL6Endpoint"
      IdentitySource:
        - $request.header.token
      EnableSimpleResponses: false
      AuthorizerPayloadFormatVersion: "2.0"
      AuthorizerResultTtlInSeconds: 300


  Lambda6SQLEndpoint:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "N6SQLEndpoint"
      Description: "Code of #6 sql endpoint."
      Runtime: "python3.9"
      Role: !GetAtt AuthLambdaRole.Arn
      Handler: get_money_from_routes_by_range.lambda_handler
      Timeout: 900
      MemorySize: 2000
      Layers:
        - "arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p39-pandas:12"
      Code:
        S3Bucket: "script-poc-case-1"
        S3Key: "sql_endpoint/get_money_from_routes_by_range.zip"

  Lambda6SQLEndpointPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref Lambda6SQLEndpoint
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com

  Lambda6SQLEndpointIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref DataUserConsumerAPIGateway
      Description: "Integration of #6 SQL endpoint process"
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda6SQLEndpoint.Arn}/invocations'

  Lambda6SQLEndpointRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref DataUserConsumerAPIGateway
      RouteKey: "POST /get_money_from_routes_by_range"
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref LambdaAuthAWS6SQLEndpointAuthorizer
      Target: !Join
        - /
        - - integrations
          - !Ref Lambda6SQLEndpointIntegration

  ## SQL endpoint #7

  LambdaAuthAWS7SQLEndpoint:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "LambdaAuthAWS7"
      Description: "Authorize the request based in permissions of access control tower for #7 sql endpoint."
      Runtime: "python3.9"
      Role: !GetAtt AuthLambdaRole.Arn
      Handler: auth_most_required_service_by_range.lambda_handler
      Timeout: 900
      MemorySize: 2000
      Layers:
        - "arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p39-pandas:12"
      Code:
        S3Bucket: "script-poc-case-1"
        S3Key: "custom_auth_lambda/auth_most_required_service_by_range.zip"

  LambdaAuthAWS7SQLEndpointPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref LambdaAuthAWS7SQLEndpoint
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com

  LambdaAuthAWS7SQLEndpointAuthorizer:
    Type: "AWS::ApiGatewayV2::Authorizer"
    Properties:
      ApiId: !Ref DataUserConsumerAPIGateway
      AuthorizerType: "REQUEST"
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaAuthAWS7SQLEndpoint.Arn}/invocations'
      Name: "AuthSQL7Endpoint"
      IdentitySource:
        - $request.header.token
      EnableSimpleResponses: false
      AuthorizerPayloadFormatVersion: "2.0"
      AuthorizerResultTtlInSeconds: 300


  Lambda7SQLEndpoint:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "N7SQLEndpoint"
      Description: "Code of #7 sql endpoint."
      Runtime: "python3.9"
      Role: !GetAtt AuthLambdaRole.Arn
      Handler: most_required_service_by_range.lambda_handler
      Timeout: 900
      MemorySize: 2000
      Layers:
        - "arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p39-pandas:12"
      Code:
        S3Bucket: "script-poc-case-1"
        S3Key: "sql_endpoint/most_required_service_by_range.zip"

  Lambda7SQLEndpointPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref Lambda7SQLEndpoint
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com

  Lambda7SQLEndpointIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref DataUserConsumerAPIGateway
      Description: "Integration of #7 SQL endpoint process"
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda7SQLEndpoint.Arn}/invocations'

  Lambda7SQLEndpointRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref DataUserConsumerAPIGateway
      RouteKey: "POST /most_required_service_by_range"
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref LambdaAuthAWS7SQLEndpointAuthorizer
      Target: !Join
        - /
        - - integrations
          - !Ref Lambda7SQLEndpointIntegration



Outputs:
  DatalakeS3NameID:
    Description: "Get name of data lake in S3 in infraestructure."
    Value: !GetAtt DatalakeS3.DomainName
  DatalakeS3URL:
    Description: "URL of website of bucket."
    Value: !GetAtt DatalakeS3.WebsiteURL
  MovingJobID:
    Description: "Logical ID of AWS Glue Job"
    Value: !Ref S3ToS3GlueJob
  DBID:
    Description: "Logical ID of AWS Glue Database"
    Value: !Ref POCCase1Database
  DBS3ID:
    Description: "S3 Path for stored querie from AWS Athena"
    Value: !Join
      - "/"
      - - "s3:/"
        - !Ref ResultedQueryStoreS3
  WorkspaceInAthena:
    Description: "Workspace to save queries inside Athena"
    Value: !Ref AthenaWorkSpace
  CrawlerTablesID:
    Description: "Crawler to generate all tables in destiny location S3"
    Value: !Ref ParserMetadataTableGlueCrawler
